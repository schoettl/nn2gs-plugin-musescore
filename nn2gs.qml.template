
/*

    Nn2GS - Übersetzt zwischen Normalnoten und Griffschrift-Tabulatur für Steirische Harmonika.
    Copyright (C) 2021-2023  Jakob Schöttl <jschoett@gmail.com>

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <https://www.gnu.org/licenses/>.

*/

import QtQuick 2.15
import MuseScore 3.0
import QtQuick.Dialogs 1.3
import QtQuick.Controls 2.15
import QtQuick.Layouts 1.15

// Discussion about QtQuick versions:
// https://musescore.org/en/node/281629
// https://doc.qt.io/qt-5/qtquickcontrols-index.html#versions

// Funktionen, die ich vllt noch brauche:
// newElement(type: int)
// removeElement(elem)
// openLog()
// closeLog()
// log(), logn(), log2()

MuseScore {
    id: plugin
    title:      "Griffschrift (Nn2GS " + version + ")" // MS4: replaces menuPath
    menuPath:   "Plugins.Griffschrift (Nn2GS " + version + ")" // MS3: plugin title
    version:    "1.0"  // DO NOT CHANGE THIS LINE - version will be set from Makefile
    description: "Dieses Plugin übersetzt zwischen Normalnoten und Griffschrift-Tabulatur für Steirische Harmonika."
    requiresScore: true

    // pluginType: "dock" doesn't work in MS4, see https://musescore.org/en/node/338769
    pluginType: "dialog"
    //dockArea:   "left"

    implicitWidth:  200
    implicitHeight: 700

    // Polyfills used by compiled functions:
    property var $jscomp: {}

    onRun: {
        console.log("Starting...")
        btnReverseDirection.text = btnReverseDirection.texts[btnReverseDirection.state]
        btnReverseDirection.background.color = colorButtonNormal

        $jscomp = {} // Polyfill object
        // POLYFILL IMPLEMENTATION HERE:

        // Additional ES5 polyfills:
        // https://tc39.github.io/ecma262/#sec-array.prototype.includes
        if (!Array.prototype.includes) {
            Object.defineProperty(Array.prototype, 'includes', {
                value: function(searchElement, fromIndex) {

                if (this == null) {
                    throw new TypeError('"this" is null or not defined');
                }

                // 1. Let O be ? ToObject(this value).
                var o = Object(this);

                // 2. Let len be ? ToLength(? Get(O, "length")).
                var len = o.length >>> 0;

                // 3. If len is 0, return false.
                if (len === 0) {
                    return false;
                }

                // 4. Let n be ? ToInteger(fromIndex).
                //    (If fromIndex is undefined, this step produces the value 0.)
                var n = fromIndex | 0;

                // 5. If n ≥ 0, then
                //  a. Let k be n.
                // 6. Else n < 0,
                //  a. Let k be len + n.
                //  b. If k < 0, let k be 0.
                var k = Math.max(n >= 0 ? n : len - Math.abs(n), 0);

                function sameValueZero(x, y) {
                    return x === y || (typeof x === 'number' && typeof y === 'number' && isNaN(x) && isNaN(y));
                }

                // 7. Repeat, while k < len
                while (k < len) {
                    // a. Let elementK be the result of ? Get(O, ! ToString(k)).
                    // b. If SameValueZero(searchElement, elementK) is true, return true.
                    if (sameValueZero(o[k], searchElement)) {
                    return true;
                    }
                    // c. Increase k by 1.
                    k++;
                }

                // 8. Return false
                return false;
                }
            });
        }

        // End of polyfills

        populateInstrumentList()
    }
    onScoreStateChanged: {
        if (state.selectionChanged) {
            // Invalidate current translation info and selection
            //console.log("Selection changed")
            invalidateCurrentResults()
            // Selection changes after converting GS → Nn; therefore
            // the disableZDButtonsForTimeout wouldn't have an effect.
            //enableZDButtons(true)
        }
    }

    //readonly property string apiUrl: "https://griffschrift-notation.de/nn2gs"
    readonly property string apiUrl: "http://localhost:3000/nn2gs"

    readonly property var colorRed: "#ff0000"
    readonly property var colorBlue: "#0000ff"
    readonly property var colorBlack: "#000000"
    readonly property var colorButtonNormal: "#bbb"
    readonly property var colorDirectionReverse: "#666"

    // Generated using Nn2GS.hs:
    // :m +Data.Char Data.Aeson
    // result = map (\(x,y) -> (x, noteNameToGerman.show $ y, computeAccidentals $ Dur y)) quintenZirkel
    // encode result
    // putStrLn ...
    readonly property var tonarten: [[-8,"Fes",["Bes","Ees","Aes","Des","Ges","Ces","Fes"]],[-7,"Ces",["Bes","Ees","Aes","Des","Ges","Ces","Fes"]],[-6,"Ges",["Bes","Ees","Aes","Des","Ges","Ces"]],[-5,"Des",["Bes","Ees","Aes","Des","Ges"]],[-4,"As",["Bes","Ees","Aes","Des"]],[-3,"Es",["Bes","Ees","Aes"]],[-2,"B",["Bes","Ees"]],[-1,"F",["Bes"]],[0,"C",[]],[1,"G",["Fis"]],[2,"D",["Fis","Cis"]],[3,"A",["Fis","Cis","Gis"]],[4,"E",["Fis","Cis","Gis","Dis"]],[5,"H",["Fis","Cis","Gis","Dis","Ais"]],[6,"Fis",["Fis","Cis","Gis","Dis","Ais","Eis"]],[7,"Cis",["Fis","Cis","Gis","Dis","Ais","Eis","Bis"]],[8,"Gis",["Fis","Cis","Gis","Dis","Ais","Eis","Bis"]],[9,"Dis",["Fis","Cis","Gis","Dis","Ais","Eis","Bis"]],[10,"Ais",["Fis","Cis","Gis","Dis","Ais","Eis","Bis"]],[11,"Eis",["Fis","Cis","Gis","Dis","Ais","Eis","Bis"]],[12,"His",["Fis","Cis","Gis","Dis","Ais","Eis","Bis"]]]


    // Generated using Nn2GS.hs:
    // Exclude some notes; see documentation in getNoteName().
    // :m Data.Aeson
    // encode . filter (not . flip elem [Eis, Bis, Ces, Fes] . withoutOctave . fst) . M.toList $ midiPitchMap
    // putStrLn "..."
    readonly property var midiPitchMap: [["C_",36],["Cis_",37],["Des_",37],["D_",38],["Dis_",39],["Ees_",39],["E_",40],["F_",41],["Fis_",42],["Ges_",42],["G_",43],["Gis_",44],["Aes_",44],["A_",45],["Ais_",46],["Bes_",46],["B_",47],["C",48],["Cis",49],["Des",49],["D",50],["Dis",51],["Ees",51],["E",52],["F",53],["Fis",54],["Ges",54],["G",55],["Gis",56],["Aes",56],["A",57],["Ais",58],["Bes",58],["B",59],["C'",60],["Cis'",61],["Des'",61],["D'",62],["Dis'",63],["Ees'",63],["E'",64],["F'",65],["Fis'",66],["Ges'",66],["G'",67],["Gis'",68],["Aes'",68],["A'",69],["Ais'",70],["Bes'",70],["B'",71],["C''",72],["Cis''",73],["Des''",73],["D''",74],["Dis''",75],["Ees''",75],["E''",76],["F''",77],["Fis''",78],["Ges''",78],["G''",79],["Gis''",80],["Aes''",80],["A''",81],["Ais''",82],["Bes''",82],["B''",83],["C'''",84],["Cis'''",85],["Des'''",85],["D'''",86],["Dis'''",87],["Ees'''",87],["E'''",88],["F'''",89],["Fis'''",90],["Ges'''",90],["G'''",91],["Gis'''",92],["Aes'''",92],["A'''",93],["Ais'''",94],["Bes'''",94],["B'''",95],["C''''",96],["Cis''''",97],["Des''''",97],["D''''",98],["Dis''''",99],["Ees''''",99],["E''''",100],["F''''",101],["Fis''''",102],["Ges''''",102],["G''''",103],["Gis''''",104],["Aes''''",104],["A''''",105],["Ais''''",106],["Bes''''",106],["B''''",107]]

    // Generated using Nn2GS.hs:
    // :m +Data.Char Data.Aeson
    // map (\x -> [show x, map toLower . noteNameToGerman . show $ x]) $ enumFrom C_
    readonly property var germanNoteNames: [["C_","c_"],["Cis_","cis_"],["Des_","des_"],["D_","d_"],["Dis_","dis_"],["Ees_","es_"],["E_","e_"],["Fes_","fes_"],["Eis_","eis_"],["F_","f_"],["Fis_","fis_"],["Ges_","ges_"],["G_","g_"],["Gis_","gis_"],["Aes_","as_"],["A_","a_"],["Ais_","ais_"],["Bes_","b_"],["B_","h_"],["Ces","ces"],["Bis_","his_"],["C","c"],["Cis","cis"],["Des","des"],["D","d"],["Dis","dis"],["Ees","es"],["E","e"],["Fes","fes"],["Eis","eis"],["F","f"],["Fis","fis"],["Ges","ges"],["G","g"],["Gis","gis"],["Aes","as"],["A","a"],["Ais","ais"],["Bes","b"],["B","h"],["Ces'","ces'"],["Bis","his"],["C'","c'"],["Cis'","cis'"],["Des'","des'"],["D'","d'"],["Dis'","dis'"],["Ees'","es'"],["E'","e'"],["Fes'","fes'"],["Eis'","eis'"],["F'","f'"],["Fis'","fis'"],["Ges'","ges'"],["G'","g'"],["Gis'","gis'"],["Aes'","as'"],["A'","a'"],["Ais'","ais'"],["Bes'","b'"],["B'","h'"],["Ces''","ces''"],["Bis'","his'"],["C''","c''"],["Cis''","cis''"],["Des''","des''"],["D''","d''"],["Dis''","dis''"],["Ees''","es''"],["E''","e''"],["Fes''","fes''"],["Eis''","eis''"],["F''","f''"],["Fis''","fis''"],["Ges''","ges''"],["G''","g''"],["Gis''","gis''"],["Aes''","as''"],["A''","a''"],["Ais''","ais''"],["Bes''","b''"],["B''","h''"],["Ces'''","ces'''"],["Bis''","his''"],["C'''","c'''"],["Cis'''","cis'''"],["Des'''","des'''"],["D'''","d'''"],["Dis'''","dis'''"],["Ees'''","es'''"],["E'''","e'''"],["Fes'''","fes'''"],["Eis'''","eis'''"],["F'''","f'''"],["Fis'''","fis'''"],["Ges'''","ges'''"],["G'''","g'''"],["Gis'''","gis'''"],["Aes'''","as'''"],["A'''","a'''"],["Ais'''","ais'''"],["Bes'''","b'''"],["B'''","h'''"],["Ces''''","ces''''"],["Bis'''","his'''"],["C''''","c''''"],["Cis''''","cis''''"],["Des''''","des''''"],["D''''","d''''"],["Dis''''","dis''''"],["Ees''''","es''''"],["E''''","e''''"],["Fes''''","fes''''"],["Eis''''","eis''''"],["F''''","f''''"],["Fis''''","fis''''"],["Ges''''","ges''''"],["G''''","g''''"],["Gis''''","gis''''"],["Aes''''","as''''"],["A''''","a''''"],["Ais''''","ais''''"],["Bes''''","b''''"],["B''''","h''''"],["Ces'''''","ces'''''"],["Bis''''","his''''"]]

    // Generated using Nn2GS.hs:
    // :m Data.Aeson
    // tonalPitches = zip [-1::Int ..4] $ repeat $ flip zip [6::Int ..] $ map snd quintenZirkel
    // encode $ concatMap (\(i, xs) -> map (\(x, p) -> (show $ mkTon' x i, p)) xs) $ map (\(i, xs) -> (i, filter (\(x,_) -> not (i == -1 && x == Ces)) xs)) $ tonalPitches
    // putStrLn ...
    readonly property var tonalPitchClassMap: [["Fes_",6],["Ges_",8],["Des_",9],["Aes_",10],["Ees_",11],["Bes_",12],["F_",13],["C_",14],["G_",15],["D_",16],["A_",17],["E_",18],["B_",19],["Fis_",20],["Cis_",21],["Gis_",22],["Dis_",23],["Ais_",24],["Eis_",25],["Bis_",26],["Fes",6],["Ces",7],["Ges",8],["Des",9],["Aes",10],["Ees",11],["Bes",12],["F",13],["C",14],["G",15],["D",16],["A",17],["E",18],["B",19],["Fis",20],["Cis",21],["Gis",22],["Dis",23],["Ais",24],["Eis",25],["Bis",26],["Fes'",6],["Ces'",7],["Ges'",8],["Des'",9],["Aes'",10],["Ees'",11],["Bes'",12],["F'",13],["C'",14],["G'",15],["D'",16],["A'",17],["E'",18],["B'",19],["Fis'",20],["Cis'",21],["Gis'",22],["Dis'",23],["Ais'",24],["Eis'",25],["Bis'",26],["Fes''",6],["Ces''",7],["Ges''",8],["Des''",9],["Aes''",10],["Ees''",11],["Bes''",12],["F''",13],["C''",14],["G''",15],["D''",16],["A''",17],["E''",18],["B''",19],["Fis''",20],["Cis''",21],["Gis''",22],["Dis''",23],["Ais''",24],["Eis''",25],["Bis''",26],["Fes'''",6],["Ces'''",7],["Ges'''",8],["Des'''",9],["Aes'''",10],["Ees'''",11],["Bes'''",12],["F'''",13],["C'''",14],["G'''",15],["D'''",16],["A'''",17],["E'''",18],["B'''",19],["Fis'''",20],["Cis'''",21],["Gis'''",22],["Dis'''",23],["Ais'''",24],["Eis'''",25],["Bis'''",26],["Fes''''",6],["Ces''''",7],["Ges''''",8],["Des''''",9],["Aes''''",10],["Ees''''",11],["Bes''''",12],["F''''",13],["C''''",14],["G''''",15],["D''''",16],["A''''",17],["E''''",18],["B''''",19],["Fis''''",20],["Cis''''",21],["Gis''''",22],["Dis''''",23],["Ais''''",24],["Eis''''",25],["Bis''''",26]]

    // For each row, the entry contains Bass, Wechselbass_Zug, Wechselbass_Druck.
    // Bass-Mapping könnte später konfigurierbar werden.
    // "W" ist laut dieses Österreichen Lehrerverbands empfohlen, also nicht X and A'?
    readonly property var bassMapping: [["A", "A'", "X"], ["B", "A", "A"], ["C", "B", "B"], ["D", "C", "C"]]

    // Prevent memory/performance problems and API abuse
    readonly property int maxChordLimit: 50

    property var lastResults: null
    property string lastZD: ''
    property int alternativeIndex: 0

    property var lastSelectionStartTick: null
    property var lastSelectionEndTick: null

    // PURE FUNCTIONS HERE:

    // IMPURE FUNCTIONS HERE:

    Shortcut {
        sequence: "Alt+R"
        context: Qt.ApplicationShortcut
        onActivated: clickReverseDirection()
    }
    // Alt+D für Druck ist schon vergeben von Menü, deswegen J/K für Z/D als Alternative
    Shortcut {
        sequence: "Alt+J"
        context: Qt.ApplicationShortcut
        onActivated: {
            if (btnZug.enabled)
                clickZug()
        }
    }
    Shortcut {
        sequence: "Alt+K"
        context: Qt.ApplicationShortcut
        onActivated: {
            if (btnDruck.enabled)
                clickDruck()
        }
    }
    Shortcut {
        sequence: "Alt+N"
        context: Qt.ApplicationShortcut
        onActivated: proceedToNextChord()
    }

    MessageDialog {
        id: errorDialog
        title: "Fehler"
        icon: StandardIcon.Critical
        function show(msg) {
            text = msg
            open()
        }
    }

    MessageDialog {
        id: warningDialog
        title: "Warnung"
        icon: StandardIcon.Warning
        function show(msg) {
            text = msg
            open()
        }
    }

    MessageDialog {
        id: infoDialog
        title: "Info"
        icon: StandardIcon.Information
        text: "Nn2GS - Übersetzen zwischen Normalnoten und Griffschrift für Steirische Harmonika und ähnliche Instrumente.\n\n      https://griffschrift-notation.de/\n\nMomentan kostenlos, irgendwann wird man für die Nutzung eine günstige Lizenz kaufen müssen.\n\nTastenkürzel: Alt+R (Übersetzungsrichtung), Alt+J (Zug), Alt+K (Druck); auch auf Beschriftungen im Plugin kann geklickt werden (versteckte Funktionen)."
    }

    Timer {
      id: invalidateResultsTimer
      interval: 100000
      running: false
      repeat: false
      //singleShot: true
      onTriggered: invalidateCurrentResults()
    }

    Timer {
      id: disableZDButtonsTimer
      interval: 2000
      running: false
      repeat: false
      //singleShot: true
      onTriggered: enableZDButtons(true)
    }

    function enableZDButtons(yes) {
        console.log("zd buttons enabled: " + yes)
        btnZug.enabled = yes
        btnDruck.enabled = yes
    }

    function invalidateCurrentResults() {
        btnNextAlternative.enabled = false
        lastResults = null
    }

    function isCurrentResultValid() {
        return !!lastResults
    }

    function checkHasSelectionChanged() {
        // MS4 does not notify the plugin about selection change anymore!
        // onScoreStateChanged is not never called. See
        // https://github.com/musescore/MuseScore/issues/20290
        // => check if selection has changed and if so, invalidate last result.
        var currentSelection = curScore.selection
        var currStartTick = currentSelection.startSegment ? currentSelection.startSegment.tick : null
        var currEndTick = currentSelection.endSegment ? currentSelection.endSegment.tick : null
        if (lastSelectionStartTick != currStartTick || lastSelectionEndTick != currEndTick) {
            console.log("Selection has changed! Invalidating lastResults and setting lastSelection to currentSelection...")
            invalidateCurrentResults()
            lastSelectionStartTick = currStartTick
            lastSelectionEndTick = currEndTick
        }
    }

    function disableZDButtonsForTimeout() {
        enableZDButtons(false)
        disableZDButtonsTimer.restart()
    }

    function invalidateResultsAfterTimeout() {
        invalidateResultsTimer.restart()
    }

    function switchDiskantBass() {
        invalidateCurrentResults()
        // Set visibility of controls:
        var bassMode = tabBar.isBassMode()
        var diskantMode = tabBar.isDiskantMode()
        spinnerTonart.enabled = !bassMode
        panelBass.visible = bassMode
        txtInstrument.visible = diskantMode
        comboModel.visible = diskantMode
        btnReverseDirection.visible = diskantMode
        txtGSVariante.visible = diskantMode
        comboTabulatureDisplay.visible = diskantMode
        checkBoxSortHeads.visible = diskantMode
    }

    function clickTest() {
        addBassNamesAsLyrics('zug')
    }
    function clickZug() {
        if (tabBar.isBassMode())
            addBassNamesAsLyrics('zug')
        else
            translateToFromGriffschrift('zug')
    }
    function clickDruck() {
        if (tabBar.isBassMode())
            addBassNamesAsLyrics('druck')
        else
            translateToFromGriffschrift('druck')
    }
    function isReverseDirection() {
        //return comboDirection.currentIndex !== 0
        return btnReverseDirection.state === 2
    }
    function clickNextAlternative() {
        // Only for Normalnotation → GS
        if (!isCurrentResultValid() || isReverseDirection()) {
            error.warn("btnNextAlternative should be disabled. Aborting.")
            return
        }
        var chords = collectChords()
        alternativeIndex += 1
        changeNotes(lastZD, false)(chords, lastResults)
    }

    function clickReverseDirection() {
        invalidateCurrentResults()
        var state = btnReverseDirection.state
        state = (state + 1) % 3
        btnReverseDirection.state = state
        btnReverseDirection.text = btnReverseDirection.texts[state]
        btnReverseDirection.background.color = (state === 2) ? colorDirectionReverse : colorButtonNormal
    }

    Pane {
        anchors.fill: parent
        padding: 2
        ColumnLayout {
            anchors.fill: parent
            Layout.fillWidth: true

            TabBar {
                id: tabBar
                width: parent.width
                onCurrentIndexChanged: switchDiskantBass()
                TabButton {
                    text: "Diskant"
                    width: 100
                }
                TabButton {
                    text: "Bass"
                    width: 100
                }
                function isBassMode() {
                    return currentIndex == 1
                }
                function isDiskantMode() {
                    return !isBassMode()
                }
            }

            // Layout for a tab view's content; currently unused
            // because there are so many common controls.
            //StackLayout {
            //    width: parent.width
            //    currentIndex: tabBar.currentIndex
            //    Item {
            //        id: diskantTab
            //    }
            //    Item {
            //        id: bassTab
            //    }
            //}

            Pane {
                visible: false // default view is "Diskant", "Bass" is invisible
                Layout.fillWidth: true
                padding: 0
                id: panelBass
                ColumnLayout {
                    anchors.fill: parent
                    Layout.fillWidth: true
                    Text {
                        text: "Stimmung der Harmonika"
                        horizontalAlignment: Text.AlignHCenter
                        Layout.fillWidth: true
                    }
                    ComboBox {
                        id: comboStimmung
                        Layout.fillWidth: true
                        textRole: "value"
                        model: ListModel {
                            // Generated using Nn2GS:
                            // :m +Music.Nn2GS
                            // putStrLn $ unlines $ map (\x -> "ListElement { key: \"" ++ showStimmung x ++ "\"; value: \"" ++ showStimmung x ++ "\"; }") stimmungen
                            ListElement { key: "G-C-F-B"; value: "G-C-F-B"; }
                            ListElement { key: "A-D-G-C"; value: "A-D-G-C"; }
                            ListElement { key: "C-F-B-Es"; value: "C-F-B-Es"; }
                            ListElement { key: "B-Es-As-Des"; value: "B-Es-As-Des"; }
                        }
                        hoverEnabled: true
                        ToolTip.visible: hovered
                        ToolTip.text: "Stimmung = Tonarten der Harmonika"
                        function currentKey() {
                            return model.get(currentIndex).key
                        }
                        onCurrentIndexChanged: {
                            invalidateCurrentResults()
                        }
                    }
                    Text {
                        text: "Basssystem"
                        horizontalAlignment: Text.AlignHCenter
                        Layout.fillWidth: true
                        // TODO bei klick das hier verlinken?
                        // Qt.openUrlExternally('http://ziach.de/Tastenbelegung/index.htm')
                    }
                    ComboBox {
                        id: comboBasssystem
                        Layout.fillWidth: true
                        textRole: "value"
                        hoverEnabled: true
                        ToolTip.visible: hovered
                        ToolTip.text: "Basssystem der Harmonika"
                        model: ListModel {
                            // Generated using Nn2GS:
                            // :m +Music.Nn2GS Music.Nn2GS.Bass
                            // putStrLn $ unlines $ map (\x -> "ListElement { key: \"" ++ modelId x ++ "\"; value: \"" ++ description x ++ "\"; }") basssysteme
                            ListElement { key: "GCFB_15-8-7-Ronegg"; value: "15 Tasten (Ronegg, Steiermark)"; }
                            ListElement { key: "ADGC_16-8-8-BayernSalzburg"; value: "16 Tasten (Bayern-Salzburg)"; }
                            ListElement { key: "ADGC_16-8-8-Schaborak"; value: "16 Tasten (Schaborak/Dufter)"; }
                            ListElement { key: "ADGC_16-8-8-Boehmisch"; value: "16 Tasten (überliefert böhmisch)"; }
                            ListElement { key: "ADGC_16-8-8-BoehmischAuer"; value: "16 Tasten (Hans Auer, böhmisch)"; }
                            ListElement { key: "GCFB_16-9-7-Michlbauer"; value: "16 Tasten (Michlbauer)"; }
                            ListElement { key: "ADGC_18-9-9-Gmachl"; value: "18 Tasten (Gmachl, Salzburg)"; }
                            ListElement { key: "ADGC_18-9-9-Schaborak"; value: "18 Tasten (Schaborak)"; }
                            ListElement { key: "ADGC_21-10-11-Schaborak"; value: "21 Tasten (Schaborak)"; }
                            ListElement { key: "ADGC_22-11-11-Schaborak"; value: "22 Tasten (Schaborak, 21 + 1)"; }
                        }
                        function currentKey() {
                            return model.get(currentIndex).key
                        }
                        onCurrentIndexChanged: {
                            invalidateCurrentResults()
                        }
                    }
                    Text {
                        text: "Benennungsschema für Basstasten"
                        horizontalAlignment: Text.AlignHCenter
                        Layout.fillWidth: true
                    }
                    ComboBox {
                        id: comboBassbenennung
                        Layout.fillWidth: true
                        textRole: "value"
                        hoverEnabled: true
                        ToolTip.visible: hovered
                        ToolTip.text: "Tastenbenennung (muss zum Basssystem passen)"
                        model: ListModel {
                            // Generated using Nn2GS:
                            // :m +Music.Nn2GS.Bass
                            // putStrLn $ unlines $ map (\x -> "ListElement { key: \"" ++ bbId x ++ "\"; value: \"" ++ bbDescription x ++ "\"; }") bassbenennungsschemas
                            ListElement { key: "15-8-7-A'"; value: "15 Bässe, A, A', …"; }
                            ListElement { key: "15-8-7-A-H"; value: "15 Bässe, A-H"; }
                            ListElement { key: "16-8-8-A-H"; value: "16 Bässe, A-H"; }
                            ListElement { key: "16-9-7-A-H+X"; value: "16 Bässe, A-H + X"; }
                            ListElement { key: "18-9-9"; value: "18 Bässe, A, A', …, X, Y"; }
                            ListElement { key: "22-10-11-A'XYZ'"; value: "22 Bässe, A, A', …, X, Y"; }
                            ListElement { key: "22-11-11-A'XYZ"; value: "22 Bässe, A, A', …, X, Y, Z"; }
                        }
                        function currentKey() {
                            return model.get(currentIndex).key
                        }
                        onCurrentIndexChanged: {
                            invalidateCurrentResults()
                        }
                    }
                }
            }

            Text {
                text: "Instrument (anzeigen)"
                id: txtInstrument
                horizontalAlignment: Text.AlignHCenter
                Layout.fillWidth: true
                MouseArea {
                    anchors.fill: parent
                    onClicked: openNn2GSBrowser()
                    // TODO doesn't work in MS4 - not for Text and not for MouseArea
                    //hoverEnabled: true
                    //ToolTip.visible: hovered
                    //ToolTip.text: "Klicken, um Instrument auf Webseite anzuzeigen"
                }
            }
            ComboBox {
                id: comboModel
                Layout.fillWidth: true
                textRole: "value"
                model: ListModel {
                    // Generated using Nn2GS.hs:
                    // :{
                    // f (Steirische {steirModelId=x, steirTonarten=ts}) = (x, Just ts)
                    // f instrument = (modelId instrument, Nothing)
                    // :}
                    // putStrLn $ unlines $ map (\(x, ts) -> "ListElement { key: \"" ++ map toLower x ++ "\"; value: \"" ++ x ++ "\"; tonarten: " ++ maybe "\"null\"" (show . show . map show) ts ++ "; }") $ map f listOfInstruments
                    // Cannot define array as property value; use JSON.parse() to decode property 'tonarten'.
                    ListElement { key: "adgc50"; value: "ADGC50"; tonarten: "[\"A\",\"D\",\"G\",\"C\"]"; }
                    ListElement { key: "besasdes50"; value: "BEsAsDes50"; tonarten: "[\"Bes\",\"Ees\",\"Aes\",\"Des\"]"; }
                    ListElement { key: "besasdes46"; value: "BEsAsDes46"; tonarten: "[\"Bes\",\"Ees\",\"Aes\",\"Des\"]"; }
                    ListElement { key: "gcfb50"; value: "GCFB50"; tonarten: "[\"G\",\"C\",\"F\",\"B\"]"; }
                    ListElement { key: "schwyzer-orgel_b"; value: "Schwyzer-Orgel_B"; tonarten: "[\"B\",\"Ees\"]"; }
                    ListElement { key: "club_cf"; value: "Club_CF"; tonarten: "[\"C\",\"F\"]"; }
                    ListElement { key: "knopfakkordeon_b"; value: "Knopfakkordeon_B"; tonarten: "null"; }
                }
                function currentKey() {
                    return model.get(currentIndex).key
                }
                onCurrentIndexChanged: {
                    invalidateCurrentResults()
                }
            }
            Text {
                text: "Aktuelle Dur-Tonart"
                horizontalAlignment: Text.AlignHCenter
                Layout.fillWidth: true
                MouseArea {
                    anchors.fill: parent
                    onClicked: lblCurrentKeyClick()
                    // TODO doesn't work in MS4 - not for Text and not for MouseArea
                    //hoverEnabled: true
                    //ToolTip.visible: hovered
                    //ToolTip.text: "Klicken, um Haupttonart automatisch zu erkennen"
                }
            }

            SpinBox {
                width: parent.width
                Layout.fillWidth: true
                id: spinnerTonart
                value: 8
                from: 0
                to: 20
                editable: true
                //validator: QRegExpValidator(/.*/) // tonarten.join('|') + ^$ anchors?
                validator: null
                textFromValue: function(value, locale) {
                    return tonarten[value][1]
                }
                valueFromText: function(text, locale) {
                    return findTonartIndex(tonarten, text)
                }
                onValueChanged: {
                    invalidateCurrentResults()
                }
                hoverEnabled: true
                ToolTip.visible: hovered
                ToolTip.text: "Tonart des Teils, der übersetzt werden soll"
            }

            ComboBox {
                id: comboDirection
                Layout.fillWidth: true
                visible: false // in favor of btnReverseDirection
                textRole: "value"
                model: ListModel {
                    ListElement { value: "Normal → GS" }
                    ListElement { value: "GS-Alternativen" }
                    ListElement { value: "GS → Normal" }
                }
                onCurrentIndexChanged: {
                    invalidateCurrentResults()
                }
            }
            Button {
                id: btnReverseDirection
                Layout.fillWidth: true
                readonly property var texts: ["Normal → GS", "GS-Alternativen", "GS → Normal"]
                //background.color: colorButtonNormal
                text: "Reverse"
                property int state: 0
                checkable: false // checked state doesn't work reliably with double clicks
                checked: false
                // Handle both events because on double click, click AND
                // double click are fired which causes a faster switching:
                onClicked: clickReverseDirection()
                //onDoubleClicked: clickReverseDirection() <- does not work on Windows
                hoverEnabled: true
                ToolTip.visible: hovered
                ToolTip.text: "Übersetzungsrichtung (Alt+R)"
            }

            Button {
                text: "Test"
                id: btnTest
                visible: false
                Layout.fillWidth: true
                onClicked: clickTest()
            }
            Button {
                text: "Zug"
                id: btnZug
                Layout.fillWidth: true
                //background.color: colorButtonNormal
                onClicked: clickZug()
                hoverEnabled: true
                ToolTip.visible: hovered
                ToolTip.text: "Ausgewählte Takte auf Zug (Alt+J)"
            }
            Button {
                text: "Druck"
                id: btnDruck
                Layout.fillWidth: true
                //background.color: colorButtonNormal
                onClicked: clickDruck()
                hoverEnabled: true
                ToolTip.visible: hovered
                ToolTip.text: "Ausgewählte Takte auf Druck (Alt+K)"
            }
            Button {
                text: "Nächste Alternative"
                Layout.fillWidth: true
                //background.color: colorButtonNormal
                visible: false
                enabled: false
                id: btnNextAlternative
                onClicked: clickNextAlternative()
                hoverEnabled: true
                ToolTip.visible: hovered
                ToolTip.text: "Alternative Griffweisen durchschalten"
            }
            Button {
                text: "Nächster Akkord"
                Layout.fillWidth: true
                //background.color: colorButtonNormal
                onClicked: proceedToNextChord()
                hoverEnabled: true
                ToolTip.visible: hovered
                ToolTip.text: "Nächsten Akkord markieren (Alt+N)"
            }

            //GroupBox {
            //    title: "Einstellungen"
            //    ColumnLayout {

            Text {
                text: "Griffschrift-Variante"
                id: txtGSVariante
                horizontalAlignment: Text.AlignHCenter
                Layout.fillWidth: true
            }

            ComboBox {
                id: comboTabulatureDisplay
                Layout.fillWidth: true
                textRole: "text"
                enabled: true
                currentIndex: 0
                model: ListModel {
                    ListElement { text: "Modern (~ Schaborak)"; key: "modern" }  // Modern
                    ListElement { text: "Klassisch (× vor Note)"; key: "klassisch_kreuz" }          // klassisch, Kreuz vor Noten
                    ListElement { text: "Klassisch (× nur vor langer Note)"; key: "klassisch_kreuz2" } // wie klassisch_kreuz, aber Notenkopf in Kreuzform (außer bei Halben/Ganzen)
                    ListElement { text: "Rosenzopf (𝄪 vor Note)"; key: "klassisch_doppelkreuz" } // Klassisch, Doppelkreuz vor Noten
                    ListElement { text: "Rosenzopf (𝄪 nur vor langer Note)"; key: "klassisch_doppelkreuz2" } // wie klassisch_doppelkreuz, aber Notenkopf in Doppelkreuzform (außer bei Halben/Ganzen)
                    ListElement { text: "Michlbauer"; key: "michlbauer.com" } // Kreuz vor Noten, 3. R. einfaches Kreuz, 4. R. kleine umringeltes Kreuz => Bravura
                    ListElement { text: "Knöpferl"; key: "knoepferl.at" } // Kreuz vor Noten, 3. R. einfaches Kreuz, 4. R. Doppelkreuz - Quelle: https://knoepferl.at/produkt/orf-wetterpanorama/
                    ListElement { text: "Klassisch (4. Reihe dickes ×)"; key: "dickes_kreuz" } // wie klassisch_kreuz, aber das dicke Kreuz für 4. Reihe
                    ListElement { text: "Matthias Pürner (×/𝄪 gemischt)"; key: "matthiaspuerner.de" }  // Matthias Pürner, Doppelkreuz vor Halben/Ganzen, normales Kreuz als Notenkopf sonst - Quelle: https://matthiaspuerner.de/wp-content/uploads/2020/11/01_19er-Marscherl-Griffschrift-2S-Partitur.pdf
                    ListElement { text: "Johannes Servi"; key: "johannesservi.de" }   // Johannes Servi (kleines Kreuz in kleinem Kreis bei langen Noten)
                    ListElement { text: "Johannes Servi mod."; key: "johannesservi.de_2" }   // Johannes Servi (Kreuz in rundem, größerem Kreis bei langen Noten)
                }
                function currentKey() {
                    return model.get(currentIndex).key
                }
                hoverEnabled: true
                ToolTip.visible: hovered
                ToolTip.text: "Aussehen der Griffschrift (Notenköpfe, Kreuzsymbole usw.)"
            }
            TextField {
                text: ""
                id: txtLicenseKey
                Layout.fillWidth: true
                visible: false
                placeholderText: "Lizenz-Schlüssel eingeben…"
                Keys.onPressed: {
                    if (text.trim() == '' && event.key == Qt.Key_Return) {
                        console.log("Opening URL in browser.")
                        Qt.openUrlExternally(apiUrl + '#faq-kosten')
                        text = ''
                    }
                }
                // Use local storage to save the key for the next session
                // https://doc.qt.io/qt-5/qtquick-localstorage-qmlmodule.html
            }

            CheckBox {
                id: checkBoxSortHeads
                checked: true
                text: "Um Notenhals sortieren"
                hoverEnabled: true
                ToolTip.visible: hovered
                ToolTip.text: "Notenköpfe platzieren je nach Lage auf Tastatur"
                indicator.width: 30
                indicator.height: 30
            }

            CheckBox {
                id: checkBoxColorZug
                checked: true
                text: "Zug-GS blau färben"
                onClicked: checkBoxColorZugClick()
                hoverEnabled: true
                ToolTip.visible: hovered
                ToolTip.text: "Haken wegnehmen, um alles schwarz zu färben"
            }

            Button {
                text: "GS abspielbar machen"
                visible: false
                Layout.fillWidth: true
                //background.color: colorButtonNormal
                onClicked: makePlayable()
            }

            Pane {
                Layout.fillWidth: true
                padding: 3
                GridLayout {
                    anchors.fill: parent
                    Layout.fillWidth: true
                    columns: 4
                    rowSpacing: 0
                    Text {
                        text: "Stimmen übersetzen"
                        horizontalAlignment: Text.AlignHCenter
                        bottomPadding: 3
                        Layout.fillWidth: true
                        Layout.columnSpan: 4
                    }

                    Text {
                        text: "1. St."
                        leftPadding: 4
                        Layout.fillWidth: true
                    }
                    Text {
                        text: "2. St."
                        leftPadding: 4
                        Layout.fillWidth: true
                    }
                    Text {
                        text: "3. St."
                        leftPadding: 4
                        Layout.fillWidth: true
                    }
                    Text {
                        text: "4. St."
                        leftPadding: 4
                        Layout.fillWidth: true
                    }

                    CheckBox {
                        id: checkBoxVoice1
                        leftPadding: 0
                        checked: true
                        onClicked: checkVoiceCheckboxesValidity()
                        hoverEnabled: true
                        ToolTip.visible: hovered
                        ToolTip.text: "Innerhalb einer Notenzeile können mehrere Stimmen stehen."
                    }
                    CheckBox {
                        id: checkBoxVoice2
                        leftPadding: 0
                        checked: true
                        onClicked: checkVoiceCheckboxesValidity()
                        hoverEnabled: true
                        ToolTip.visible: hovered
                        ToolTip.text: "Für die meisten zwei- und dreistimmigen Stücke reicht aber die 1. Stimme aus."
                    }
                    CheckBox {
                        id: checkBoxVoice3
                        leftPadding: 0
                        checked: true
                        onClicked: checkVoiceCheckboxesValidity()
                        hoverEnabled: true
                        ToolTip.visible: hovered
                        ToolTip.text: "Für die meisten zwei- und dreistimmigen Stücke reicht aber die 1. Stimme aus."
                    }
                    CheckBox {
                        id: checkBoxVoice4
                        leftPadding: 0
                        checked: true
                        onClicked: checkVoiceCheckboxesValidity()
                        hoverEnabled: true
                        ToolTip.visible: hovered
                        ToolTip.text: "Eine unsichtbare 4. Stimme mit Liedtext kann z.B. für Bassnotation verwendet werden."
                    }
                }
            }

            Button {
                text: "Info"
                Layout.fillWidth: true
                //background.color: colorButtonNormal
                onClicked: infoDialog.open()
            }
        }
    }
  }
